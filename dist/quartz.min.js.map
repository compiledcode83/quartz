{"version":3,"sources":["quartz.min.js"],"names":["root","factory","define","amd","exports","module","Quartz","this","config","columnClass","columnCount","yIndices","container","$document","querySelector","items","toArray","querySelectorAll","mediaQueries","$window","matchMedia","bindMediaQueries","update","initialized","window","document","isArray","Array","prototype","append","length","columns","createColumnFragments","heights","getItemHeights","liveColumns","children","refreshYIndices","distributeItemsToColumns","i","appendChild","concat","prepend","createColumns","heights1","heights2","getExistingItemHeights","resetYIndices","clearContainer","childNodes","remove","index","_items","indexOf","splice","removeAll","numColumns","firstChild","removeChild","fragments","count","push","createDocumentFragment","column","createElement","className","createTestColumn","liveColumn","testColumn","style","position","left","top","width","getComputedStyle","columnIndex","getColumnIndex","min","Math","apply","marginBottom","parseInt","l","offsetHeight","object","a","mediaQueryList","mqlListener","matched","query","bindToMediaQueryList","matches","quartz","mql","addListener"],"mappings":"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","file":"quartz.min.js","sourcesContent":[";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.Quartz = factory();\n  }\n}(this, function() {\n'use strict';\n\n\nvar $window = window,\n    $document = document;\n\nvar isArray = Array.isArray;\n\n\n/**\n * @name Quartz\n * @constructor\n *\n * @param {{}} config\n * @param {string} config.columnClass\n * @param {number} [config.columnCount]\n * @param {Element|string} config.container\n * @param {Element|Element[]|jQuery|NodeList|string} config.items\n * @param {Array} [config.mediaQueries]\n *\n */\nfunction Quartz(config) {\n  this.columnClass = config.columnClass;\n  this.columnCount = config.columnCount;\n  this.yIndices = [];\n\n  if (typeof config.container === 'string') {\n    this.container = $document.querySelector(config.container);\n  }\n  else {\n    this.container = config.container;\n  }\n\n  if (typeof config.items === 'string') {\n    this.items = this.toArray($document.querySelectorAll(config.items));\n  }\n  else {\n    this.items = this.toArray(config.items);\n  }\n\n  if (config.mediaQueries && $window.matchMedia) {\n    this.bindMediaQueries(config.mediaQueries);\n  }\n  else {\n    this.update();\n  }\n\n  this.initialized = true;\n}\n\n\nQuartz.prototype = {\n\n  /*=================================================================\n    Public API\n  =================================================================*/\n\n  /**\n   * @param {Element|Element[]|NodeList} items\n   */\n  append : function(items) {\n    if (typeof items.length === 'undefined') {\n      items = [items];\n    }\n\n    var columnCount = this.columnCount,\n        columns     = this.createColumnFragments(),\n        container   = this.container,\n        heights     = this.getItemHeights(items),\n        liveColumns = container.children;\n\n    this.refreshYIndices();\n    this.distributeItemsToColumns(columns, items, heights);\n\n    for (var i = 0; i < columnCount; i++) {\n      liveColumns[i].appendChild(columns[i]);\n    }\n\n    this.items = this.items.concat(this.toArray(items));\n  },\n\n\n  /**\n   * @param {Element|Element[]|NodeList} items\n   */\n  prepend : function(items) {\n    items = this.toArray(items);\n\n    var columns  = this.createColumns(),\n        heights1 = this.getItemHeights(items),\n        heights2 = this.getExistingItemHeights(),\n        heights  = heights1.concat(heights2);\n\n    items = items.concat(this.items);\n\n    this.resetYIndices();\n    this.clearContainer();\n    this.distributeItemsToColumns(columns.childNodes, items, heights);\n    this.container.appendChild(columns);\n    this.items = items;\n  },\n\n\n  /**\n   * @param {Element|Element[]|NodeList} items\n   */\n  remove : function(items) {\n    if (typeof items.length === 'undefined') {\n      items = [items];\n    }\n\n    var _items = this.items,\n        i = items.length,\n        index;\n\n    while (i--) {\n      index = _items.indexOf(items[i]);\n      if (index !== -1) {\n        _items.splice(index, 1);\n      }\n    }\n\n    this.update();\n  },\n\n\n  /**\n   *\n   */\n  removeAll : function() {\n    this.items.length = 0;\n    this.update();\n  },\n\n\n  /**\n   * @param {number} [numColumns]\n   */\n  update : function(numColumns) {\n    if (numColumns) this.columnCount = numColumns;\n\n    var columns = this.createColumns(),\n        items = this.items,\n        heights;\n\n    this.resetYIndices();\n\n    if (items.length) {\n      heights = this.initialized ? this.getExistingItemHeights() : this.getItemHeights(items);\n      this.clearContainer();\n      this.distributeItemsToColumns(columns.childNodes, items, heights);\n    }\n    else {\n      this.clearContainer();\n    }\n\n    this.container.appendChild(columns);\n  },\n\n\n\n  /*=================================================================\n    Internal\n  =================================================================*/\n\n  /**\n   *\n   */\n  clearContainer : function() {\n    var container = this.container;\n\n    while (container.firstChild) {\n      container.removeChild(container.firstChild);\n    }\n  },\n\n\n  /**\n   * @returns {DocumentFragment[]}\n   */\n  createColumnFragments : function() {\n    var fragments = [],\n        count = this.columnCount;\n\n    while (count--) {\n      fragments.push($document.createDocumentFragment());\n    }\n\n    return fragments;\n  },\n\n\n  /**\n   * @returns {DocumentFragment} with <div> child nodes\n   */\n  createColumns : function() {\n    var count = this.columnCount,\n        columnClass = this.columnClass,\n        columns = $document.createDocumentFragment(),\n        column;\n\n    while (count--) {\n      column = $document.createElement('div');\n      column.className = columnClass;\n      columns.appendChild(column);\n    }\n\n    return columns;\n  },\n\n\n  /**\n   * @returns {Element}\n   */\n  createTestColumn : function() {\n    var liveColumn = this.container.firstChild,\n        testColumn = $document.createElement('div');\n\n    testColumn.className = this.columnClass;\n    testColumn.style.position = 'absolute';\n    testColumn.style.left = '-10000px';\n    testColumn.style.top = '-10000px';\n\n    if (liveColumn && liveColumn.className === this.columnClass) {\n      testColumn.style.width = $window.getComputedStyle(liveColumn).width;\n    }\n\n    return testColumn;\n  },\n\n\n  /**\n   * @param {DocumentFragment[]|NodeList} columns\n   * @param {Element[]|NodeList} items\n   * @param {number[]} heights\n   */\n  distributeItemsToColumns : function(columns, items, heights) {\n    var count = items.length,\n        yIndices = this.yIndices,\n        columnIndex;\n\n    for (var i = 0; i < count; i++) {\n      columnIndex = this.getColumnIndex();\n      yIndices[columnIndex] += heights[i];\n      columns[columnIndex].appendChild(items[i]);\n    }\n  },\n\n\n  /**\n   * @returns {number}\n   */\n  getColumnIndex : function() {\n    var min = Math.min.apply(Math, this.yIndices);\n    return this.yIndices.indexOf(min);\n  },\n\n\n  /**\n   * @returns {number[]}\n   */\n  getExistingItemHeights : function() {\n    var items = this.items,\n        heights = [];\n\n    if (items.length) {\n      var style = $window.getComputedStyle(items[0]),\n          marginBottom = parseInt(style.marginBottom, 10);\n\n      for (var i = 0, l = items.length; i < l; i++) {\n        heights.push(items[i].offsetHeight + marginBottom);\n      }\n    }\n\n    return heights;\n  },\n\n\n  /**\n   * @param {Element[]|NodeList} items\n   * @returns {number[]}\n   */\n  getItemHeights : function(items) {\n    var testColumn = this.createTestColumn(),\n        heights = [],\n        i = 0,\n        l = items.length;\n\n    for (i; i < l; i++) {\n      testColumn.appendChild(items[i]);\n    }\n\n    this.container.appendChild(testColumn);\n\n    var style = $window.getComputedStyle(items[0]),\n        marginBottom = parseInt(style.marginBottom, 10);\n\n    for (i = 0; i < l; i++) {\n      heights.push(items[i].offsetHeight + marginBottom);\n    }\n\n    this.container.removeChild(testColumn);\n\n    return heights;\n  },\n\n\n  /**\n   *\n   */\n  refreshYIndices : function() {\n    var columns = this.container.children,\n        count = columns.length,\n        yIndices = this.yIndices;\n\n    if (count) {\n      yIndices.length = 0;\n\n      for (var i = 0; i < count; i++) {\n        yIndices.push(columns[i].offsetHeight);\n      }\n    }\n  },\n\n\n  /**\n   * @returns {number[]}\n   */\n  resetYIndices : function() {\n    var count = this.columnCount,\n        yIndices = this.yIndices;\n\n    yIndices.length = 0;\n\n    while (count--) {\n      yIndices.push(0);\n    }\n  },\n\n\n  /**\n   * @param {Element|Element[]|NodeList} object\n   * @returns {Element[]}\n   */\n  toArray : function(object) {\n    if (isArray(object)) return object;\n\n    var i = object.length;\n\n    if (typeof i === 'number') {\n      var a = new Array(i);\n      while (i--) { a[i] = object[i]; }\n      return a;\n    }\n\n    return [object];\n  },\n\n\n  /**\n   * @param {{query:string, columns:number}[]} mediaQueries\n   */\n  bindMediaQueries : function(mediaQueries) {\n    var matched = false,\n        config,\n        mediaQueryList,\n        mqlListener;\n\n    for (var i = 0, l = mediaQueries.length; i < l; i++) {\n      config = mediaQueries[i];\n      mediaQueryList = $window.matchMedia(config.query);\n      mqlListener = this.bindToMediaQueryList(mediaQueryList, config, this);\n\n      if (!matched && mediaQueryList.matches) {\n        matched = true;\n        mqlListener(mediaQueryList);\n      }\n    }\n  },\n\n\n  /**\n   * @param {MediaQueryList} mediaQueryList\n   * @param {{query:string, columns:number}} config\n   * @param {Quartz} quartz\n   * @returns {Function}\n   */\n  bindToMediaQueryList : function(mediaQueryList, config, quartz) {\n    var mqlListener = function(mql) {\n      if (mql.matches) {\n        quartz.update(config.columns);\n      }\n    };\n\n    mediaQueryList.addListener(mqlListener);\n    return mqlListener;\n  }\n\n};\n\nreturn Quartz;\n}));\n"],"sourceRoot":"/source/"}